{"/home/travis/build/npmtest/node-npmtest-agenda/test.js":"/* istanbul instrument in package npmtest_agenda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-agenda/lib.npmtest_agenda.js":"/* istanbul instrument in package npmtest_agenda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_agenda = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_agenda = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-agenda/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-agenda && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_agenda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_agenda\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_agenda.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_agenda.rollup.js'] =\n            local.assetsDict['/assets.npmtest_agenda.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_agenda.__dirname +\n                    '/lib.npmtest_agenda.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-agenda/node_modules/agenda/index.js":"var agenda = module.exports = require('./lib/agenda.js');\n","/home/travis/build/npmtest/node-npmtest-agenda/node_modules/agenda/lib/agenda.js":"/*  Code forked from https://github.com/rschmukler/agenda\n *\n *  Updates by Neville Franks neville.franks@gmail.com www.clibu.com\n *  - Refactored MongoDB code to use the MongoDB Native Driver V2 instead of MongoSkin.\n *  - Renamed _db to _collection because it is a collection, not a db.\n *  - Moved code into Agenda.db_init() and call same for all initialization functions.\n *  - Removed findJobsResultWrapper() and replaced with inline code.\n *  - Removed db code from jobs.js\n *  - Comments.\n *\n *  TODO:\n *  - Refactor remaining deprecated MongoDB Native Driver methods. findAndModify()\n *\n *  Last change: NF 4/06/2015 2:06:12 PM\n */\n\nvar Job = require('./job.js'),\n  humanInterval = require('human-interval'),\n  utils = require('util'),\n  Emitter = require('events').EventEmitter;\n\nvar MongoClient = require('mongodb').MongoClient,\n    Db = require('mongodb').Db;\n\n\nvar Agenda = module.exports = function(config, cb) {\n  if (!(this instanceof Agenda)) {\n    return new Agenda(config);\n  }\n  config = config ? config : {};\n  this._name = config.name;\n  this._processEvery = humanInterval(config.processEvery) || humanInterval('5 seconds');\n  this._defaultConcurrency = config.defaultConcurrency || 5;\n  this._maxConcurrency = config.maxConcurrency || 20;\n  this._defaultLockLimit = config.defaultLockLimit || 0;\n  this._lockLimit = config.lockLimit || 0;\n  this._definitions = {};\n  this._runningJobs = [];\n  this._lockedJobs = [];\n  this._jobQueue = [];\n  this._defaultLockLifetime = config.defaultLockLifetime || 10 * 60 * 1000; //10 minute default lockLifetime\n\n  this._isLockingOnTheFly = false;\n  this._jobsToLock = [];\n  if (config.mongo) {\n    this.mongo(config.mongo, config.db ? config.db.collection : undefined, cb);\n  } else if (config.db) {\n    this.database(config.db.address, config.db.collection, config.db.options, cb);\n  }\n};\n\nutils.inherits(Agenda, Emitter);    // Job uses emit() to fire job events client can use.\n\n// Configuration Methods\n\nAgenda.prototype.mongo = function( mdb, collection, cb ){\n  this._mdb = mdb;\n  this.db_init(collection, cb);   // NF 20/04/2015\n  return this;\n};\n\n/** Connect to the spec'd MongoDB server and database.\n *  Notes:\n *    - If `url` inludes auth details then `options` must specify: { 'uri_decode_auth': true }. This does Auth on the specified\n *      database, not the Admin database. If you are using Auth on the Admin DB and not on the Agenda DB, then you need to\n *      authenticate against the Admin DB and then pass the MongoDB instance in to the Constructor or use Agenda.mongo().\n *    - If your app already has a MongoDB connection then use that. ie. specify config.mongo in the Constructor or use Agenda.mongo().\n */\nAgenda.prototype.database = function(url, collection, options, cb) {\n  if (!url.match(/^mongodb:\\/\\/.*/)) {\n    url = 'mongodb://' + url;\n  }\n\n  collection = collection || 'agendaJobs';\n  options = options || {};\n  var self = this;\n\n  MongoClient.connect(url, options, function ( error, db ){\n    if (error) {\n      if (cb) {\n        cb(error, null);\n      } else {\n        throw error;\n      }\n\n      return;\n    }\n\n    self._mdb = db;\n    self.db_init( collection, cb );\n  });\n  return this;\n};\n\n/** Setup and initialize the collection used to manage Jobs.\n *  @param collection collection name or undefined for default 'agendaJobs'\n *  NF 20/04/2015\n */\nAgenda.prototype.db_init = function( collection, cb ){\n  this._collection = this._mdb.collection(collection || 'agendaJobs');\n  var self = this;\n  this._collection.createIndexes([{\n                                  \"key\": {\"name\" : 1, \"priority\" : -1, \"lockedAt\" : 1, \"nextRunAt\" : 1, \"disabled\" : 1},\n                                  \"name\": \"findAndLockNextJobIndex1\"\n                                }, {\n                                  \"key\": {\"name\" : 1, \"lockedAt\" : 1, \"priority\" : -1, \"nextRunAt\" : 1, \"disabled\" : 1},\n                                  \"name\": \"findAndLockNextJobIndex2\"\n                                }],\n                                function( err, result ){\n                                  handleLegacyCreateIndex(err, result, self, cb)\n                                });\n};\n\nfunction handleLegacyCreateIndex(err, result, self, cb){\n  if(err && err.message !== 'no such cmd: createIndexes'){\n    self.emit('error', err);\n  } else {\n    // Looks like a mongo.version < 2.4.x\n    err = null;\n    self._collection.ensureIndex(\n        {\"name\": 1, \"priority\": -1, \"lockedAt\": 1, \"nextRunAt\": 1, \"disabled\": 1},\n        {name: \"findAndLockNextJobIndex1\"}\n    );\n    self._collection.ensureIndex(\n        {\"name\": 1, \"lockedAt\": 1, \"priority\": -1, \"nextRunAt\": 1, \"disabled\": 1},\n        {name: \"findAndLockNextJobIndex2\"}\n    );\n    self.emit('ready');\n  }\n  if (cb){\n    cb(err, self._collection);\n  }\n}\n\nAgenda.prototype.name = function(name) {\n  this._name = name;\n  return this;\n};\n\nAgenda.prototype.processEvery = function(time) {\n  this._processEvery = humanInterval(time);\n  return this;\n};\n\nAgenda.prototype.maxConcurrency = function(num) {\n  this._maxConcurrency = num;\n  return this;\n};\n\nAgenda.prototype.defaultConcurrency = function(num) {\n  this._defaultConcurrency = num;\n  return this;\n};\n\nAgenda.prototype.lockLimit = function (num) {\n  this._lockLimit = num;\n  return this;\n};\n\nAgenda.prototype.defaultLockLimit = function (num) {\n  this._defaultLockLimit = num;\n  return this;\n};\n\nAgenda.prototype.defaultLockLifetime = function(ms){\n  this._defaultLockLifetime = ms;\n  return this;\n};\n\n// Job Methods\nAgenda.prototype.create = function(name, data) {\n  var priority = this._definitions[name] ? this._definitions[name].priority : 0;\n  var job = new Job({name: name, data: data, type: 'normal', priority: priority, agenda: this});\n  return job;\n};\n\n\n/** Find all Jobs matching `query` and pass same back in cb().\n *  refactored. NF 21/04/2015\n */\nAgenda.prototype.jobs = function( query, cb ){\n  var self = this;\n  this._collection.find( query ).toArray( function( error, result ){\n    var jobs;\n    if( !error ){\n      jobs = result.map( createJob.bind( null, self ) );\n    }\n    cb( error, jobs );\n  });\n};\n\n\nAgenda.prototype.purge = function(cb) {\n  var definedNames = Object.keys(this._definitions);\n  this.cancel( {name: {$not: {$in: definedNames}}}, cb );   // NF refactored 21/04/2015\n};\n\nAgenda.prototype.define = function(name, options, processor) {\n  if (!processor) {\n    processor = options;\n    options = {};\n  }\n  this._definitions[name] = {\n    fn: processor,\n    concurrency: options.concurrency || this._defaultConcurrency,\n    lockLimit: options.lockLimit || this._defaultLockLimit,\n    priority: options.priority || 0,\n    lockLifetime: options.lockLifetime || this._defaultLockLifetime,\n    running: 0,\n    locked: 0\n  };\n};\n\nAgenda.prototype.every = function(interval, names, data, options, cb) {\n  var self = this;\n\n  if (cb == undefined && typeof data == 'function') {\n    cb = data;\n    data = undefined;\n  } else if (cb == undefined && typeof options == 'function') {\n    cb = options;\n    options = undefined;\n  }\n\n  if (typeof names === 'string' || names instanceof String) {\n    return createJob(interval, names, data, options, cb);\n  } else if (Array.isArray(names)) {\n    return createJobs(interval, names, data, options, cb);\n  }\n\n  function createJob(interval, name, data, options, cb) {\n    var job = self.create(name, data);\n    job.attrs.type = 'single';\n    job.repeatEvery(interval, options);\n    job.computeNextRunAt();\n    job.save(cb);\n    return job;\n  }\n\n  function createJobs(interval, names, data, options, cb) {\n    var results = [];\n    var pending = names.length;\n    var errored = false;\n    return names.map(function (name, i) {\n      return createJob(interval, name, data, options, function(err, result) {\n        if (err) {\n          if (!errored) cb(err);\n          errored = true;\n          return;\n        }\n        results[i] = result;\n        if (--pending == 0 && cb) cb(null, results);\n      });\n    });\n\n  }\n};\n\nAgenda.prototype.schedule = function(when, names, data, cb) {\n  var self = this;\n\n  if (cb == undefined && typeof data == 'function') {\n    cb = data;\n    data = undefined;\n  }\n\n  if (typeof names === 'string' || names instanceof String) {\n    return createJob(when, names, data, cb);\n  } else if (Array.isArray(names)) {\n    return createJobs(when, names, data, cb);\n  }\n\n\n  function createJob(when, name, data, cb) {\n    var job = self.create(name, data);\n    job.schedule(when);\n    job.save(cb);\n    return job;\n  }\n\n  function createJobs(when, names, data, cb) {\n    var results = [];\n    var pending = names.length;\n    var errored = false;\n    return names.map(function (name, i) {\n      return createJob(when, name, data, function(err, result) {\n        if (err) {\n          if (!errored) cb(err);\n          errored = true;\n          return;\n        }\n        results[i] = result;\n        if (--pending == 0 && cb) cb(null, results);\n      });\n    });\n  }\n};\n\nAgenda.prototype.now = function(name, data, cb) {\n  if (!cb && typeof data == 'function') {\n    cb = data;\n    data = undefined;\n  }\n  var job = this.create(name, data);\n  job.schedule(new Date());\n  job.save(cb);\n  return job;\n};\n\n\n/** Cancels any jobs matching the passed mongodb query, and removes them from the database.\n *  @param query mongo db query\n *  @param cb callback( error, numRemoved )\n *\n *  @caller client code, Agenda.purge(), Job.remove()\n */\nAgenda.prototype.cancel = function(query, cb) {\n  this._collection.deleteMany( query, function( error, result ){\n    if (cb) {\n      cb( error, result && result.result ? result.result.n : undefined );\n    }\n  });\n\n};\n\nAgenda.prototype.saveJob = function(job, cb) {\n  var fn = cb,\n      self = this;\n\n  var props = job.toJSON();\n  var id = job.attrs._id;\n  var unique = job.attrs.unique;\n  var uniqueOpts = job.attrs.uniqueOpts;\n\n  delete props._id;\n  delete props.unique;\n  delete props.uniqueOpts;\n\n  props.lastModifiedBy = this._name;\n\n  var now = new Date(),\n      protect = {},\n      update = { $set: props };\n\n  if (id) {\n    this._collection.findAndModify({_id: id}, {}, update, {new: true}, processDbResult );\n  } else if (props.type == 'single') {\n    if (props.nextRunAt && props.nextRunAt <= now) {\n      protect.nextRunAt = props.nextRunAt;\n      delete props.nextRunAt;\n    }\n    if (Object.keys(protect).length > 0) {\n      update.$setOnInsert = protect;\n    }\n    // Try an upsert.\n    this._collection.findAndModify({name: props.name, type: 'single'}, {}, update, {upsert: true, new: true}, processDbResult);\n  } else if (unique) {\n    var query = job.attrs.unique;\n    query.name = props.name;\n    if( uniqueOpts && uniqueOpts.insertOnly )\n      update = { $setOnInsert: props };\n    this._collection.findAndModify(query, {}, update, {upsert: true, new: true}, processDbResult);\n  } else {\n    this._collection.insertOne(props, processDbResult);    // NF updated 22/04/2015\n  }\n\n  function processDbResult(err, result) {\n    if (err) {\n      if (fn) {\n        return fn(err);\n      } else {\n        throw err;\n      }\n    } else if (result) {\n      var res = result.ops ? result.ops : result.value;     // result is different for findAndModify() vs. insertOne(). NF 20/04/2015\n      if ( res ){\n        if (Array.isArray(res)) {\n          res = res[0];\n        }\n\n        job.attrs._id = res._id;\n        job.attrs.nextRunAt = res.nextRunAt;\n\n        if (job.attrs.nextRunAt && job.attrs.nextRunAt < self._nextScanAt) {\n          processJobs.call(self, job);\n        }\n      }\n    }\n\n    if (fn) {\n      fn(null, job);\n    }\n  }\n};\n\n// Job Flow Methods\n\nAgenda.prototype.start = function() {\n  if (!this._processInterval) {\n    this._processInterval = setInterval(processJobs.bind(this), this._processEvery);\n    process.nextTick(processJobs.bind(this));\n  }\n};\n\nAgenda.prototype.stop = function(cb) {\n  cb = cb || function() {};\n  clearInterval(this._processInterval);\n  this._processInterval = undefined;\n  this._unlockJobs(cb);\n};\n\n/**\n * Find and lock jobs\n * @param {String} jobName\n * @param {Function} cb\n * @protected\n *  @caller jobQueueFilling() only\n */\nAgenda.prototype._findAndLockNextJob = function(jobName, definition, cb) {\n  var self = this,\n      now = new Date(),\n      lockDeadline = new Date(Date.now().valueOf() - definition.lockLifetime);\n\n  // Don't try and access Mongo Db if we've lost connection to it. Also see clibu_automation.js db.on.close code. NF 29/04/2015\n  // Trying to resolve crash on Dev PC when it resumes from sleep.\n  var s = this._mdb.s || this._mdb.db.s;\n  if (s.topology.connections().length === 0) {\n    cb(new Error( 'No MongoDB Connection'));\n  } else {\n    this._collection.findAndModify(\n      {\n        $or: [\n          {name: jobName, lockedAt: null, nextRunAt: {$lte: this._nextScanAt}, disabled: { $ne: true }},\n          {name: jobName, lockedAt: {$exists: false}, nextRunAt: {$lte: this._nextScanAt}, disabled: { $ne: true }},\n          {name: jobName, lockedAt: {$lte: lockDeadline}, disabled: { $ne: true }}\n        ]\n      },\n      {'priority': -1},  // sort\n      {$set: {lockedAt: now}},  // Doc\n      {'new': true},  // options\n      function (err, result) {\n        var job;\n        if (!err && result.value) {\n          job = createJob(self, result.value);\n        }\n        cb(err, job);\n      }\n    );\n  }\n};\n\n\n/**\n * Create Job object from data\n * @param {Object} agenda\n * @param {Object} jobData\n * @return {Job}\n * @private\n */\nfunction createJob(agenda, jobData) {\n  jobData.agenda = agenda;\n  return new Job(jobData);\n}\n\n// Refactored to Agenda method. NF 22/04/2015\n// @caller Agenda.stop() only. Could be moved into stop(). NF\nAgenda.prototype._unlockJobs = function(done) {\n  var jobIds = this._lockedJobs.map(function (job) {\n    return job.attrs._id;\n  });\n  this._collection.updateMany({_id: { $in: jobIds } }, { $set: { lockedAt: null } }, done);    // NF refactored .update() 22/04/2015\n};\n\nfunction processJobs(extraJob) {\n  if (!this._processInterval) {\n    return;\n  }\n\n  var definitions = this._definitions,\n    jobName,\n    jobQueue = this._jobQueue,\n    self = this;\n\n  if (!extraJob) {\n    for (jobName in definitions) {\n      jobQueueFilling(jobName);\n    }\n  } else if (definitions[extraJob.attrs.name]) {\n    self._jobsToLock.push(extraJob);\n    lockOnTheFly();\n  }\n\n   /**\n    * Returns true if a job of the specified name can be locked.\n    *\n    * Considers maximum locked jobs at any time if self._lockLimit is > 0\n    * Considers maximum locked jobs of the specified name at any time if jobDefinition.lockLimit is > 0\n    */\n  function shouldLock(name) {\n    var shouldLock = true;\n    var jobDefinition = definitions[name];\n\n    if(self._lockLimit && self._lockLimit <= self._lockedJobs.length) {\n      shouldLock = false;\n    }\n\n    if(jobDefinition.lockLimit && jobDefinition.lockLimit <= jobDefinition.locked) {\n      shouldLock = false;\n    }\n\n    return shouldLock;\n  }\n\n  function enqueueJobs(jobs, inFront) {\n    if (!Array.isArray(jobs)) {\n      jobs = [jobs];\n    }\n\n    jobs.forEach(function(job) {\n      var jobIndex, start, loopCondition, endCondition, inc;\n\n      if(inFront) {\n        start = jobQueue.length ? jobQueue.length - 1 : 0;\n        inc = -1;\n        loopCondition = function () {\n          return jobIndex >= 0;\n        };\n        endCondition = function (queuedJob) {\n          return !queuedJob || queuedJob.attrs.priority < job.attrs.priority;\n        };\n      } else {\n        start = 0;\n        inc = 1;\n        loopCondition = function () {\n          return jobIndex < jobQueue.length;\n        };\n        endCondition = function (queuedJob) {\n          return queuedJob.attrs.priority >= job.attrs.priority;\n        };\n      }\n\n      for(jobIndex = start; loopCondition(); jobIndex += inc) {\n        if(endCondition(jobQueue[jobIndex])) break;\n      }\n\n      // insert the job to the queue at its prioritized position for processing\n      jobQueue.splice(jobIndex, 0, job);\n    });\n  }\n\n  function lockOnTheFly() {\n    if(self._isLockingOnTheFly) {\n      return;\n    }\n\n    if(!self._jobsToLock.length) {\n      self._isLockingOnTheFly = false;\n      return;\n    }\n\n    self._isLockingOnTheFly = true;\n\n    var now = new Date();\n    var job = self._jobsToLock.pop();\n\n    // If locking limits have been hit, stop locking on the fly.\n    // Jobs that were waiting to be locked will be picked up during a\n    // future locking interval.\n    if(!shouldLock(job.attrs.name)) {\n      self._jobsToLock = [];\n      self._isLockingOnTheFly = false;\n      return;\n    }\n\n    var criteria = {\n      _id: job.attrs._id,\n      lockedAt: null,\n      nextRunAt: job.attrs.nextRunAt,\n      disabled: { $ne: true }\n    };\n\n    var sort = {};\n    var update = { $set: { lockedAt: now } };\n    var options = { new: true };\n\n    self._collection.findAndModify(criteria, sort, update, options, function(err, resp) {\n      if (resp.value) {\n        var job = createJob(self, resp.value);\n\n        self._lockedJobs.push(job);\n        definitions[job.attrs.name].locked++;\n\n        enqueueJobs(job);\n        jobProcessing();\n      }\n      self._isLockingOnTheFly = false;\n      lockOnTheFly();\n    });\n  }\n\n  function jobQueueFilling(name) {\n    if(!shouldLock(name)) {\n      return;\n    }\n\n    var now = new Date();\n    self._nextScanAt = new Date(now.valueOf() + self._processEvery);\n    self._findAndLockNextJob(name, definitions[name], function(err, job) {\n      if (err) {\n        throw err;\n      }\n\n      if (job) {\n        self._lockedJobs.push(job);\n        definitions[job.attrs.name].locked++;\n\n        enqueueJobs(job);\n        jobQueueFilling(name);\n        jobProcessing();\n      }\n    });\n  }\n\n  function jobProcessing() {\n    if (!jobQueue.length) {\n      return;\n    }\n\n    var now = new Date();\n\n    // Get the next job that is not blocked by concurrency\n    var next;\n    for(next = jobQueue.length - 1; next > 0; next -= 1) {\n      var def = definitions[jobQueue[next].attrs.name];\n      if(def.concurrency > def.running) break;\n    }\n\n    var job = jobQueue.splice(next, 1)[0],\n      jobDefinition = definitions[job.attrs.name];\n\n    if (job.attrs.nextRunAt < now) {\n      runOrRetry();\n    } else {\n      setTimeout(runOrRetry, job.attrs.nextRunAt - now);\n    }\n\n    function runOrRetry() {\n      if (self._processInterval) {\n        if (jobDefinition.concurrency > jobDefinition.running &&\n          self._runningJobs.length < self._maxConcurrency) {\n\n          var lockDeadline = new Date(Date.now() - jobDefinition.lockLifetime);\n\n          if (job.attrs.lockedAt < lockDeadline) {\n            // Drop expired job\n            self._lockedJobs.splice(self._lockedJobs.indexOf(job), 1);\n            jobDefinition.locked--;\n            jobProcessing();\n            return;\n          }\n\n          self._runningJobs.push(job);\n          jobDefinition.running++;\n          job.run(processJobResult);\n          jobProcessing();\n        } else {\n          // Put on top to run ASAP\n          enqueueJobs(job, true);\n        }\n      }\n    }\n  }\n\n  function processJobResult(err, job) {\n    if (err && !job) throw(err)\n    var name = job.attrs.name;\n\n    if (self._runningJobs.indexOf(job) == -1) throw(\"callback already called - job \" + name + \" already marked complete\");\n\n    self._runningJobs.splice(self._runningJobs.indexOf(job), 1);\n    if (definitions[name].running > 0) definitions[name].running--;\n\n    self._lockedJobs.splice(self._lockedJobs.indexOf(job), 1);\n    if (definitions[name].locked > 0) definitions[name].locked--;\n\n    jobProcessing();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-agenda/node_modules/agenda/lib/job.js":"/** @package\n\n    job.js\n\n    21/04/2015 NF   Removed database code. ie. From Job.remove()\n\n  Last change: NF 21/04/2015 1:20:47 PM\n*/\n\nvar humanInterval = require('human-interval'),\n    CronTime = require('cron').CronTime,\n    date = require('date.js'),\n    moment = require('moment-timezone');\n\nvar Job = module.exports = function Job(args) {\n  args = args || {};\n\n  // Remove special args\n  this.agenda = args.agenda;\n  delete args.agenda;\n\n  // Process args\n  args.priority = parsePriority(args.priority) || 0;\n\n  // Set attrs to args\n  var attrs = {};\n  for (var key in args) {\n    if (args.hasOwnProperty(key)) {\n      attrs[key] = args[key];\n    }\n  }\n\n  // Set defaults if undefined\n  attrs.nextRunAt = attrs.nextRunAt || new Date();\n  attrs.type = attrs.type || 'once';\n  this.attrs = attrs;\n};\n\nJob.prototype.toJSON = function() { // create a persistable Mongo object -RR\n    var self = this,\n        attrs = self.attrs || {};\n\n    var result = {};\n\n    for (var prop in attrs) {\n      if (attrs.hasOwnProperty(prop)) {\n        result[prop] = attrs[prop];\n      }\n    }\n\n    var dates = ['lastRunAt', 'lastFinishedAt', 'nextRunAt', 'failedAt', 'lockedAt'];\n    dates.forEach(function(d) {\n      if (result[d]) {\n        result[d] = new Date(result[d]);\n      }\n    });\n\n    return result;\n};\n\nJob.prototype.computeNextRunAt = function() {\n  var interval = this.attrs.repeatInterval;\n  var timezone = this.attrs.repeatTimezone;\n  var repeatAt = this.attrs.repeatAt;\n  this.attrs.nextRunAt = undefined;\n\n  if (interval) {\n    computeFromInterval.call(this);\n  } else if (repeatAt) {\n    computeFromRepeatAt.call(this);\n  }\n  return this;\n\n  function dateForTimezone (d) {\n    d = moment(d);\n    if(timezone) d.tz(timezone);\n    return d;\n  }\n\n  function computeFromInterval() {\n    var lastRun = this.attrs.lastRunAt || new Date();\n    lastRun = dateForTimezone(lastRun);\n    try {\n      var cronTime = new CronTime(interval);\n      var nextDate = cronTime._getNextDateFrom(lastRun);\n      if (nextDate.valueOf() == lastRun.valueOf()) {\n        // Handle cronTime giving back the same date for the next run time\n        nextDate = cronTime._getNextDateFrom(dateForTimezone(new Date(lastRun.valueOf() + 1000)));\n      }\n      this.attrs.nextRunAt = nextDate;\n    } catch (e) {\n      // Nope, humanInterval then!\n      try {\n        if (!this.attrs.lastRunAt && humanInterval(interval)) {\n          this.attrs.nextRunAt = lastRun.valueOf();\n        } else {\n          this.attrs.nextRunAt = lastRun.valueOf() + humanInterval(interval);\n        }\n      } catch (e) {}\n    } finally {\n      if (isNaN(this.attrs.nextRunAt)) {\n        this.attrs.nextRunAt = undefined;\n        this.fail('failed to calculate nextRunAt due to invalid repeat interval');\n      }\n    }\n  }\n\n  function computeFromRepeatAt() {\n    var lastRun = this.attrs.lastRunAt || new Date();\n    var nextDate = date(repeatAt).valueOf();\n\n    var offset = Date.now();  // if you do not specify offset date for below test it will fail for ms\n    if (offset === date(repeatAt,offset).valueOf()) {\n      this.attrs.nextRunAt = undefined;\n      this.fail('failed to calculate repeatAt time due to invalid format');\n    } else if (nextDate.valueOf() == lastRun.valueOf()) {\n      this.attrs.nextRunAt = date('tomorrow at ', repeatAt);\n    } else {\n      this.attrs.nextRunAt = date(repeatAt);\n    }\n  }\n};\n\nJob.prototype.repeatEvery = function(interval, options) {\n  options = options || {};\n  this.attrs.repeatInterval = interval;\n  this.attrs.repeatTimezone = options.timezone ? options.timezone : null;\n  return this;\n};\n\nJob.prototype.repeatAt = function(time) {\n  this.attrs.repeatAt = time;\n  return this;\n};\n\nJob.prototype.disable = function() {\n  this.attrs.disabled = true;\n  return this;\n};\n\nJob.prototype.enable = function() {\n  this.attrs.disabled = false;\n  return this;\n};\n\nJob.prototype.unique = function(unique, opts) {\n  this.attrs.unique = unique;\n  this.attrs.uniqueOpts = opts;\n  return this;\n};\n\nJob.prototype.schedule = function(time) {\n  this._scheduled = true;\n  this.attrs.nextRunAt = (time instanceof Date) ? time : date(time);\n  return this;\n};\n\nJob.prototype.priority = function(priority) {\n  this.attrs.priority = parsePriority(priority);\n  return this;\n};\n\nJob.prototype.fail = function(reason) {\n  if(reason instanceof Error) {\n    reason = reason.message;\n  }\n  this.attrs.failReason = reason;\n  this.attrs.failCount = (this.attrs.failCount || 0) + 1;\n  this.attrs.failedAt = new Date();\n  return this;\n};\n\nJob.prototype.run = function(cb) {\n  var self = this,\n      agenda = self.agenda,\n      definition = agenda._definitions[self.attrs.name];\n\n  var setImmediate = setImmediate || process.nextTick;\n  setImmediate(function() {\n    self.attrs.lastRunAt = new Date();\n    self.computeNextRunAt();\n    self.save(function() {\n      var jobCallback = function(err) {\n        if (err) {\n          self.fail(err);\n        }\n\n        self.attrs.lastFinishedAt = new Date();\n        self.attrs.lockedAt = null;\n        self.save(function(saveErr, job) {\n          cb && cb(err || saveErr, job);\n          if (err) {\n            agenda.emit('fail', err, self);\n            agenda.emit('fail:' + self.attrs.name, err, self);\n          } else {\n            agenda.emit('success', self);\n            agenda.emit('success:' + self.attrs.name, self);\n          }\n          agenda.emit('complete', self);\n          agenda.emit('complete:' + self.attrs.name, self);\n        });\n      };\n\n      try {\n        agenda.emit('start', self);\n        agenda.emit('start:' + self.attrs.name, self);\n        if (!definition) {\n          throw new Error('Undefined job');\n        }\n        if (definition.fn.length === 2) {\n          definition.fn(self, jobCallback);\n        } else {\n          definition.fn(self);\n          jobCallback();\n        }\n      } catch (e) {\n        jobCallback(e);\n      }\n    });\n  });\n};\n\nJob.prototype.isRunning = function() {\n  if (!this.attrs.lastRunAt) return false;\n  if (!this.attrs.lastFinishedAt) return true;\n  if (this.attrs.lockedAt && this.attrs.lastRunAt.getTime() > this.attrs.lastFinishedAt.getTime()) {\n    return true;\n  }\n  return false;\n};\n\nJob.prototype.save = function(cb) {\n  this.agenda.saveJob(this, cb);\n  return this;\n};\n\nJob.prototype.remove = function(cb) {\n  // refactored NF 21/04/2015\n  this.agenda.cancel( {_id: this.attrs._id}, cb );\n/*\n  var self = this;\n  this.agenda._db.remove({_id: this.attrs._id}, function(err, count) {\n    if(err) {\n      return cb(err);\n    }\n    cb(err, count);\n  });\n*/\n};\n\nJob.prototype.touch = function(cb) {\n  this.attrs.lockedAt = new Date();\n  this.save(cb);\n};\n\nfunction parsePriority(priority) {\n  var priorityMap = {\n    lowest: -20,\n    low: -10,\n    normal: 0,\n    high: 10,\n    highest: 20\n  };\n  if (typeof priority === 'number' || priority instanceof Number)\n    return priority;\n  else\n    return priorityMap[priority];\n}\n"}